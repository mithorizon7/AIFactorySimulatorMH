Make Tutorial Progression Truly Interactive (Advance on Actions)
Current: The tutorial currently advances only when the user clicks the “Continue” button in the tooltip dialogs, regardless of whether they performed the instructed action. There’s no check that, say, the player actually clicked the highlighted button or opened the specified panel. In fact, a user can click “Continue” through all the steps without doing anything in the game – or conversely, they might perform the action but wonder why the tutorial hasn’t moved on. The code has a completedActions list in state and a checkTutorialProgression stubGitHubGitHub, implying an intent to auto-advance when actions are done, but this isn’t implemented. The design goal (per earlier planning) was that “the tutorial will only advance when the user performs the correct action”GitHub, which isn’t the case in the current build.
Desired: The tutorial should respond to user actions – learning by doing. Ideally, each step advances immediately once the player completes the task (e.g. clicking on the Compute section, pressing the upgrade button, etc.), without requiring a manual “Continue.” For example, when the tutorial highlights “Invest $100 in Compute”, as soon as the user clicks that button and the investment goes through, the tutorial should automatically proceed to the next step (maybe after a brief confirmation flash). If the user hasn’t done the action yet, the tutorial could remain on that step (and perhaps disable the continue button or show a subtle prompt like “Complete the action to continue”). This way, the on-screen guidance is synced with the player’s actual progress in interacting with the UI.
Why: This change will make the onboarding far more engaging and effective. It prevents players from accidentally skipping content and encourages them to follow along actively. It also addresses any confusion where a user clicks the highlighted element and nothing happens with the tutorial – currently, they might not realize they still need to hit “Continue” on the tooltip. By removing that extra step when unnecessary, we streamline the experience and reinforce the learning-by-doing approach (the tutorial feels more like an interactive coach than a slideshow of tips). This was a key intuition behind the new system, so implementing it will fulfill that original goal and improve user satisfaction.
Solution: Leverage the game’s state updates or action callbacks to trigger advanceTutorial() at the right times. There are a few ways to do this, and you can implement them step by step:
•	State-monitoring approach: Use the completedActions array in gameState.tutorial. For each tutorial step, define a unique action tag (e.g., “openedComputePanel”, “upgradedCompute”, “openedDataPanel”, etc.). Push these into tutorial.completedActions when the player does the thing. Then, enhance the checkTutorialProgression function (in useGameEngine.ts) to auto-advance when a required action flag appears. For example, if the current step’s targetElement or a new field (like expectedAction) is satisfied by an entry in completedActions, then call advanceTutorial(). This approach centralizes the logic but requires mapping steps to actions.
In summary, tie the tutorial’s progression to the game events. The code already toasts a success message when tutorial completes; similarly, you can toast or highlight when each action is done (“Compute upgraded!”) then auto-move to the next tooltip. By doing this, the tutorial will mirror the user’s actual progress, resolving the disconnect in the current implementation. Once these fixes are in place, test the flow: the tutorial should no longer linger waiting for a manual continue if the user has done what was asked, and it won’t jump ahead unless the action is done – making the onboarding truly interactive and satisfying.



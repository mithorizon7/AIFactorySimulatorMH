Introduction vs. Tutorial Overlap – Sequence and State Management Improvements
Current: There’s a timing issue between the WelcomeIntroduction screens and the tutorial pop-ups, leading to possible overlap or a confusing order, especially for returning players. For first-time players, after the two Phase 1 welcome dialogs (Spark’s intro steps), the code immediately triggers the multi-tab Introduction modal at the same time as finishing Phase 1
GitHub
. This can cause the second tutorial dialog (“The Three Pillars of AI”) and the introduction to appear almost simultaneously or one on top of the other. (The effect checks if (tutorial.phase > 1 || (phase===1 && step===2 && isActive)) to show the intro
GitHub
 – that second condition means the intro opens even while the Phase 1 Step 2 modal is still active, instead of waiting until it’s done.) For returning players (those with hasPlayedAIFactory in localStorage), the code shows the Introduction modal right away on game start
GitHub
 but does not disable the tutorial – so the Phase 1 tutorial modals are still set to run in the background. This leads to a double welcome: the user sees the Introduction first, then after closing it they might still get Spark’s “Welcome to AI Factory!” popup, which feels out of order.
Desired: A smooth, non-overlapping onboarding sequence. After launching the game for the first time, the player should see Spark’s two quick welcome modals, then the multi-tab Introduction, and then move into the interactive tutorial steps. For returning players starting a new game, we likely want to skip the redundant welcome pop-ups entirely (maybe show just a brief refresher or go straight into gameplay), or at least ensure they don’t conflict with the intro. Essentially, the tutorial and the introduction should not contend with each other on screen – each should have its turn. Also, when the Introduction is open, the tutorial highlights should probably pause or hide.
Why: This is important for clarity. Overlapping modals can confuse the user or cause them to miss information. By cleaning up this sequence, we ensure the player isn’t bombarded or given duplicate info. It also fixes the perception that the tutorial “might not be loading fully” – when in fact it was loading, but hidden behind another overlay. A clear separation (welcome → intro → interactive tutorial) will make the onboarding feel intentional and user-friendly.
Solution: Refine the logic in AIFactory.tsx that controls showing the Introduction. You can remove or modify the (phase===1 && step===2 && isActive) condition so that the intro only triggers after Phase 1 is fully complete – for example, only when tutorial.phase > 1 (i.e., the tutorial has advanced to Phase 2)
GitHub
. This way it waits until the user clicks “Continue” on the second Spark modal before popping the intro, avoiding concurrency. Next, ensure the tutorial UI is suspended during the Introduction. A simple fix is to only render <UnifiedTutorialSystem> when the intro is not shown – e.g., {!showIntroduction && <UnifiedTutorialSystem ... />} in the JSX, so that while the intro dialog is up, the tutorial component returns null. This will prevent any highlight or tooltip from showing beneath or above the intro. For returning players, consider setting the tutorial to start at Phase 2 or marking hasShownWelcome true on load if hasPlayedBefore is found. In practice, you could call skipTutorial() after showing the intro for returning users if you want to bypass the guided steps entirely, or at least advance the state to skip the two welcome popups. Another approach: in initialGameState, initialize tutorial.isActive to false for returning users (you’d detect this in useEffect and adjust state accordingly). Any of these would prevent the double welcome scenario. The recommended path is to coordinate these states: use the hasShownWelcome flag in GameState – for example, set it to true once the Phase 1 modals have run once. The code could check this on game load to decide whether to immediately skip Phase 1. By implementing these changes, the tutorial’s welcome sequence will be linear: Spark’s messages → Introduction modal → interactive tutorial, with no overlaps or repeats.
